```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new char[N][M];
 
        String temp;
        ball r = null, b=null;
        for(int i = 0 ; i < N ; i++) {
            temp = br.readLine();
            for(int j = 0 ; j < M ; j++) {
                map[i][j] = temp.charAt(j);
                if(map[i][j] == 'R') {//빨간 공  
                    r = new ball(i, j, 0);
                    map[i][j] = '.';
                }
                if(map[i][j] == 'B') {//파란 공
                    b = new ball(i, j, 1);
                    map[i][j] = '.';
                }
            }
        }
        
        dfs(r, b, 0);
        if(min == Integer.MAX_VALUE)
            System.out.println(-1);
        else
            System.out.println(min);
    }
    static int N, M;
    static char[][] map;
 
    static int[][] delta = {
            {-1, 0},
            {0, 1},
            {1, 0},
            {0, -1}
    };
    
    static class ball{
        int color; // 0 = 빨강, 1 = 파랑
        int y, x;
        public ball(int y, int x, int color) {
            this.y = y;
            this.x = x;
            this.color = color;
        }
    }
    static int min = Integer.MAX_VALUE;
 
    // red, blue를 4방향으로 한 번씩 이동시킨다. 
    static void dfs(ball red, ball blue, int cnt) {
        int ry = red.y, rx = red.x, by = blue.y, bx = blue.x;
        
        if(cnt >= 10)
            return;
        
        ball first, second, temp;
        int ny, nx;
        for(int dir = 0 ; dir < 4 ; dir++) {
            
            first = new ball(red.y, red.x, red.color);
            second = new ball(blue.y, blue.x, blue.color);
            // 방향에 따른 이동 위치 비교 -> 이동할 위치에서 더 멀리 있는 공부터 이동
            if(dir == 0 && first.y > second.y) { // up 이동 
                temp = first;
                first = second;
                second = temp;
            }else if(dir == 1 && second.x > first.x ) {
                temp = first;
                first = second;
                second = temp;
            }else if(dir == 2 && first.y < second.y) { 
                temp = first;
                first = second;
                second = temp;
            }else if(dir == 3 && second.x < first.x ) {
                temp = first;
                first = second;
                second = temp;
            }
            
            // first부터 이동 
            ny = first.y + delta[dir][0];
            nx = first.x + delta[dir][1];
            while(map[ny][nx] == '.') {
                ny += delta[dir][0];
                nx += delta[dir][1];
            }
            
            boolean isGoal = false;
            if(map[ny][nx] == 'O') {
                if(first.color == 1) {
                    continue;
                }else {
                    isGoal = true;
                }
            }else {
                int rev = (dir == 0 || dir == 2)? 2-dir: 4-dir;
                ny += delta[rev][0];
                nx += delta[rev][1];
                if(ny == second.y && nx == second.x) {
                    ny += delta[rev][0];
                    nx += delta[rev][1];
                }
                first.y = ny;
                first.x = nx;
            }
            
            // second 이동 
            ny = second.y + delta[dir][0];
            nx = second.x + delta[dir][1];
            while(map[ny][nx] == '.') {
                ny += delta[dir][0];
                nx += delta[dir][1];
            }
            if(map[ny][nx] == 'O') {
                if(second.color == 1)
                    continue;
                else {
                    isGoal = true;
                }
            }else {
                int rev = (dir == 0 || dir == 2)? 2-dir: 4-dir;
                ny += delta[rev][0];
                nx += delta[rev][1];
                if(ny == first.y && nx == first.x) {
                    ny += delta[rev][0];
                    nx += delta[rev][1];
                }
                second.y = ny;
                second.x = nx;
            }
            
            if(isGoal) {
                if(min > cnt+1) {
                    min = cnt+1;
                }
                continue;
            }
 
            if(first.color == 0 && cnt < 10) {
                dfs(first, second, cnt+1);
            }else {
                dfs(second, first, cnt+1);
            }
        }
        
    }
}
```

